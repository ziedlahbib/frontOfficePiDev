{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { Technologie } from '../../model/technologie';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction AutocompleteComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function AutocompleteComponent_div_2_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const technology_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onTechnologySelected(technology_r1));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const technology_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(technology_r1);\n  }\n}\nexport class AutocompleteComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.technologySelected = new EventEmitter(); // Emit selected technology of type Technologie\n    this.allTechnologies = []; // Initialize with all possible technologies\n    this.filteredTechnologies = [];\n    this.userInput = new FormControl('');\n    this.allTechnologies = Object.values(Technologie).filter(value => typeof value === 'string');\n    this.userInput.valueChanges.pipe(debounceTime(300), distinctUntilChanged()).subscribe(value => {\n      if (value && value.startsWith('#')) {\n        // Check if value is not null or undefined\n        const searchTerm = value.substring(1);\n        this.filteredTechnologies = this.filterTechnologies(searchTerm);\n      } else {\n        this.filteredTechnologies = this.allTechnologies;\n      }\n    });\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    this.questform = this.formBuilder.group({\n      userInput: ['', Validators.required]\n    });\n    this.questform.valueChanges.subscribe(data => {\n      console.log(this.questform);\n    });\n  }\n  onTechnologySelected(technology) {\n    this.technologySelected.emit(technology);\n    this.userInput.setValue(''); // Clear input after selecting a technology\n  }\n\n  filterTechnologies(searchTerm) {\n    return this.allTechnologies.filter(t => t.toString().toLowerCase().includes(searchTerm.toLowerCase()));\n  }\n  static #_ = this.ɵfac = function AutocompleteComponent_Factory(t) {\n    return new (t || AutocompleteComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AutocompleteComponent,\n    selectors: [[\"app-autocomplete\"]],\n    outputs: {\n      technologySelected: \"technologySelected\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[\"type\", \"text\", 3, \"formControl\"], [4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n    template: function AutocompleteComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\");\n        i0.ɵɵelement(1, \"input\", 0);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, AutocompleteComponent_div_2_Template, 3, 1, \"div\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formControl\", ctx.userInput);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.filteredTechnologies);\n      }\n    },\n    dependencies: [CommonModule, i2.NgForOf, ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormControlDirective, FormsModule, i1.NgForm],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAoBA,YAAY,QAAwB,eAAe;AACvE,SAAsBC,WAAW,EAAaC,WAAW,EAAEC,mBAAmB,EAAEC,UAAU,QAAQ,gBAAgB;AAClH,SAASC,YAAY,EAAEC,oBAAoB,QAAQ,gBAAgB;AACnE,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,YAAY,QAAQ,iBAAiB;;;;;;;ICD9CC,2BAAqD;IAC9CA;MAAA;MAAA;MAAA;MAAA,OAASA,yDAAgC;IAAA,EAAC;IAACA,YAAgB;IAAAA,iBAAM;;;;IAAtBA,eAAgB;IAAhBA,mCAAgB;;;ADUlE,OAAM,MAAOC,qBAAqB;EAMhCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IALrB,uBAAkB,GAAG,IAAIZ,YAAY,EAAe,CAAC,CAAC;IAChE,oBAAe,GAAkB,EAAE,CAAC,CAAC;IACrC,yBAAoB,GAAkB,EAAE;IACxC,cAAS,GAAG,IAAIC,WAAW,CAAC,EAAE,CAAC;IAG7B,IAAI,CAACY,eAAe,GAAGC,MAAM,CAACC,MAAM,CAACR,WAAW,CAAC,CAACS,MAAM,CAACC,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,CAAkB;IAC7G,IAAI,CAACC,SAAS,CAACC,YAAY,CAACC,IAAI,CAC9Bf,YAAY,CAAC,GAAG,CAAC,EACjBC,oBAAoB,EAAE,CACvB,CAACe,SAAS,CAACJ,KAAK,IAAG;MAClB,IAAIA,KAAK,IAAIA,KAAK,CAACK,UAAU,CAAC,GAAG,CAAC,EAAE;QAAE;QACpC,MAAMC,UAAU,GAAGN,KAAK,CAACO,SAAS,CAAC,CAAC,CAAC;QACrC,IAAI,CAACC,oBAAoB,GAAG,IAAI,CAACC,kBAAkB,CAACH,UAAU,CAAC;OAChE,MAAM;QACL,IAAI,CAACE,oBAAoB,GAAG,IAAI,CAACZ,eAAe;;IAEpD,CAAC,CAAC;EACJ;EACAc,QAAQ;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACjB,WAAW,CAACkB,KAAK,CAAC;MACtCZ,SAAS,EAAE,CAAC,EAAE,EAAEd,UAAU,CAAC2B,QAAQ;KAEtC,CAAC;IAEF,IAAI,CAACF,SAAS,CAACV,YAAY,CAACE,SAAS,CACnCW,IAAI,IAAE;MAACC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,SAAS,CAAC;IAAA,CAAC,CACpC;EACH;EACEM,oBAAoB,CAACC,UAAuB;IAC1C,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAACF,UAAU,CAAC;IACxC,IAAI,CAAClB,SAAS,CAACqB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/B;;EAEQb,kBAAkB,CAACH,UAAkB;IAC3C,OAAO,IAAI,CAACV,eAAe,CAACG,MAAM,CAACwB,CAAC,IAAIA,CAAC,CAACC,QAAQ,EAAE,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACpB,UAAU,CAACmB,WAAW,EAAE,CAAC,CAAC;EACxG;EAAC;qBAzCUhC,qBAAqB;EAAA;EAAA;UAArBA,qBAAqB;IAAAkC;IAAAC;MAAAR;IAAA;IAAAS;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCdlC1C,4BAAM;QACJA,2BAA6C;QAC/CA,iBAAO;QACPA,sEAEM;;;QAJeA,eAAyB;QAAzBA,2CAAyB;QAElBA,eAAuB;QAAvBA,kDAAuB;;;mBDSxCD,YAAY,cAACL,mBAAmB,mHAACD,WAAW;IAAAkD;EAAA","names":["EventEmitter","FormControl","FormsModule","ReactiveFormsModule","Validators","debounceTime","distinctUntilChanged","Technologie","CommonModule","i0","AutocompleteComponent","constructor","formBuilder","allTechnologies","Object","values","filter","value","userInput","valueChanges","pipe","subscribe","startsWith","searchTerm","substring","filteredTechnologies","filterTechnologies","ngOnInit","initForm","questform","group","required","data","console","log","onTechnologySelected","technology","technologySelected","emit","setValue","t","toString","toLowerCase","includes","selectors","outputs","standalone","features","decls","vars","consts","template","styles"],"sourceRoot":"","sources":["C:\\Users\\lahbi\\OneDrive - ESPRIT\\Bureau\\wetransfer_courzello-backoffice_2024-02-21_2018\\Courzello-backOffice\\frontOfficePiDev\\src\\app\\pages\\autocomplete\\autocomplete.component.ts","C:\\Users\\lahbi\\OneDrive - ESPRIT\\Bureau\\wetransfer_courzello-backoffice_2024-02-21_2018\\Courzello-backOffice\\frontOfficePiDev\\src\\app\\pages\\autocomplete\\autocomplete.component.html"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\nimport { Technologie } from '../../model/technologie';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'app-autocomplete',\r\n  templateUrl: './autocomplete.component.html',\r\n  styleUrls: ['./autocomplete.component.scss'],\r\n  imports:[CommonModule,ReactiveFormsModule,FormsModule, ]\r\n})\r\nexport class AutocompleteComponent  implements OnInit {\r\n  @Output() technologySelected = new EventEmitter<Technologie>(); // Emit selected technology of type Technologie\r\n  allTechnologies: Technologie[] = []; // Initialize with all possible technologies\r\n  filteredTechnologies: Technologie[] = [];\r\n  userInput = new FormControl('');\r\n  questform!:FormGroup;\r\n  constructor(private formBuilder: FormBuilder) {\r\n    this.allTechnologies = Object.values(Technologie).filter(value => typeof value === 'string') as Technologie[];\r\n    this.userInput.valueChanges.pipe(\r\n      debounceTime(300),\r\n      distinctUntilChanged()\r\n    ).subscribe(value => {\r\n      if (value && value.startsWith('#')) { // Check if value is not null or undefined\r\n        const searchTerm = value.substring(1);\r\n        this.filteredTechnologies = this.filterTechnologies(searchTerm);\r\n      } else {\r\n        this.filteredTechnologies = this.allTechnologies;\r\n      }\r\n    });\r\n  }\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n\r\n  initForm() {\r\n    this.questform = this.formBuilder.group({\r\n      userInput: ['', Validators.required],\r\n\r\n  });\r\n\r\n  this.questform.valueChanges.subscribe(\r\n    data=>{console.log(this.questform)}\r\n  )\r\n}\r\n  onTechnologySelected(technology: Technologie) {\r\n    this.technologySelected.emit(technology);\r\n    this.userInput.setValue(''); // Clear input after selecting a technology\r\n  }\r\n\r\n  private filterTechnologies(searchTerm: string): Technologie[] {\r\n    return this.allTechnologies.filter(t => t.toString().toLowerCase().includes(searchTerm.toLowerCase()));\r\n  }\r\n}\r\n","<form> <!-- Add form element here -->\r\n  <input type=\"text\" [formControl]=\"userInput\">\r\n</form> <!-- Close form element here -->\r\n<div *ngFor=\"let technology of filteredTechnologies\">\r\n  <div (click)=\"onTechnologySelected(technology)\">{{ technology }}</div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}