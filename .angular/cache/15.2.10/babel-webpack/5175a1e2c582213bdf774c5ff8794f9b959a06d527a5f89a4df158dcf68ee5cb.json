{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuestionServiceService {\n  constructor(http) {\n    this.http = http;\n    this.addquestionUrl = \"http://localhost:8090/pi/question/add-question\";\n    this.getquestionbyIdsurl = \"http://localhost:8090/pi/question/get-question\";\n    this.getQuestionsurl = \"http://localhost:8090/pi/question/get-questions\";\n    this.modifierQuestionUrl = \"http://localhost:8090/pi/question/update-question\";\n    this.deleteQuestionUrl = \"http://localhost:8090/pi/question/delete-question\";\n    ////////////////////////////////////////////////////////////////\n    this.voteurl = \"http://localhost:8090/pi/vote/add-delete-vote\";\n    this.nbrvoteurl = \"http://localhost:8090/pi/vote/nbr-vote\";\n    ///////////////////////////////////////////////////\n    this.addreponseurl = \"http://localhost:8090/pi/reponse/add-Reponse\";\n    this.getrepbyquestionsurl = \"http://localhost:8090/pi/reponse/getallcmtbypost\";\n  }\n  ajoutQuestion(q, idu) {\n    return this.http.post(`${this.addquestionUrl}/${idu}`, q);\n  }\n  getQuestions() {\n    return this.http.get(`${this.getQuestionsurl}`);\n  }\n  getQuestionbyId(id) {\n    return this.http.get(`${this.getquestionbyIdsurl}/${id}`);\n  }\n  updateQuestion(id, q) {\n    return this.http.put(`${this.modifierQuestionUrl}/${id}`, q);\n  }\n  deletePost(id) {\n    return this.http.delete(`${this.deleteQuestionUrl}/${id}`);\n  }\n  ////////////////////////////////////////////\n  vote(idq, idu, vote) {\n    return this.http.post(`${this.voteurl}/${idu}/${idq}`, vote);\n  }\n  getnbrvote(idp) {\n    return this.http.get(`${this.nbrvoteurl}/${idp}`);\n  }\n  //////////////////////////////////////////////\n  ////////////////////////////////////////////:\n  addreponse(idq, idu, cmt) {\n    return this.http.post(`${this.addreponseurl}/${idu}/${idq}`, cmt);\n  }\n  getreponsebyquestion(id) {\n    return this.http.get(`${this.getrepbyquestionsurl}/${id}`);\n  }\n  static #_ = this.ɵfac = function QuestionServiceService_Factory(t) {\n    return new (t || QuestionServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuestionServiceService,\n    factory: QuestionServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAUA,OAAM,MAAOA,sBAAsB;EAajCC,YAAoBC,IAAiB;IAAjB,SAAI,GAAJA,IAAI;IAXxB,mBAAc,GAAC,gDAAgD;IAC/D,wBAAmB,GAAC,gDAAgD;IACpE,oBAAe,GAAC,iDAAiD;IACjE,wBAAmB,GAAC,mDAAmD;IACvE,sBAAiB,GAAC,mDAAmD;IACrE;IACA,YAAO,GAAC,+CAA+C;IACvD,eAAU,GAAC,wCAAwC;IACnD;IACA,kBAAa,GAAC,8CAA8C;IAC5D,yBAAoB,GAAC,kDAAkD;EAC9B;EACzCC,aAAa,CAACC,CAAW,EAACC,GAAU;IAClC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAW,GAAG,IAAI,CAACC,cAAc,IAAIF,GAAG,EAAE,EAACD,CAAC,CAAC;EACpE;EACAI,YAAY;IACV,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAa,GAAG,IAAI,CAACC,eAAe,EAAE,CAAC;EAE7D;EACAC,eAAe,CAACC,EAAS;IACvB,OAAO,IAAI,CAACV,IAAI,CAACO,GAAG,CAAW,GAAG,IAAI,CAACI,mBAAmB,IAAID,EAAE,EAAE,CAAC;EAErE;EACAE,cAAc,CAACF,EAAS,EAAER,CAAU;IAClC,OAAO,IAAI,CAACF,IAAI,CAACa,GAAG,CAAW,GAAG,IAAI,CAACC,mBAAmB,IAAIJ,EAAE,EAAE,EAACR,CAAC,CAAC;EACvE;EACAa,UAAU,CAACL,EAAS;IAClB,OAAO,IAAI,CAACV,IAAI,CAACgB,MAAM,CAAC,GAAG,IAAI,CAACC,iBAAiB,IAAIP,EAAE,EAAE,CAAC;EAC5D;EACA;EACAQ,IAAI,CAACC,GAAU,EAAEhB,GAAU,EAACe,IAAa;IACvC,OAAO,IAAI,CAAClB,IAAI,CAACI,IAAI,CAAO,GAAG,IAAI,CAACgB,OAAO,IAAIjB,GAAG,IAAIgB,GAAG,EAAE,EAACD,IAAI,CAAC;EACnE;EACAG,UAAU,CAACC,GAAU;IACnB,OAAO,IAAI,CAACtB,IAAI,CAACO,GAAG,CAAS,GAAG,IAAI,CAACgB,UAAU,IAAID,GAAG,EAAE,CAAC;EAE3D;EACA;EACA;EACAE,UAAU,CAACL,GAAU,EAAEhB,GAAU,EAACsB,GAAW;IAC3C,OAAO,IAAI,CAACzB,IAAI,CAACI,IAAI,CAAU,GAAG,IAAI,CAACsB,aAAa,IAAIvB,GAAG,IAAIgB,GAAG,EAAE,EAACM,GAAG,CAAC;EAC3E;EACAE,oBAAoB,CAACjB,EAAS;IAC5B,OAAO,IAAI,CAACV,IAAI,CAACO,GAAG,CAAY,GAAG,IAAI,CAACqB,oBAAoB,IAAIlB,EAAE,EAAE,CAAC;EAEvE;EAAC;qBA/CUZ,sBAAsB;EAAA;EAAA;WAAtBA,sBAAsB;IAAA+B,SAAtB/B,sBAAsB;IAAAgC,YAFrB;EAAM","names":["QuestionServiceService","constructor","http","ajoutQuestion","q","idu","post","addquestionUrl","getQuestions","get","getQuestionsurl","getQuestionbyId","id","getquestionbyIdsurl","updateQuestion","put","modifierQuestionUrl","deletePost","delete","deleteQuestionUrl","vote","idq","voteurl","getnbrvote","idp","nbrvoteurl","addreponse","cmt","addreponseurl","getreponsebyquestion","getrepbyquestionsurl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lahbi\\OneDrive - ESPRIT\\Bureau\\wetransfer_courzello-backoffice_2024-02-21_2018\\Courzello-backOffice\\frontOfficePiDev\\src\\app\\service\\question-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Question } from '../model/question';\r\nimport { Observable } from 'rxjs';\r\nimport { Vote } from '../model/vote';\r\nimport { Reponse } from '../model/reponse';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuestionServiceService {\r\n\r\n  addquestionUrl=\"http://localhost:8090/pi/question/add-question\";\r\n  getquestionbyIdsurl=\"http://localhost:8090/pi/question/get-question\";\r\n  getQuestionsurl=\"http://localhost:8090/pi/question/get-questions\";\r\n  modifierQuestionUrl=\"http://localhost:8090/pi/question/update-question\";\r\n  deleteQuestionUrl=\"http://localhost:8090/pi/question/delete-question\";\r\n  ////////////////////////////////////////////////////////////////\r\n  voteurl=\"http://localhost:8090/pi/vote/add-delete-vote\";\r\n  nbrvoteurl=\"http://localhost:8090/pi/vote/nbr-vote\";\r\n  ///////////////////////////////////////////////////\r\n  addreponseurl=\"http://localhost:8090/pi/reponse/add-Reponse\";\r\n  getrepbyquestionsurl=\"http://localhost:8090/pi/reponse/getallcmtbypost\";\r\n  constructor(private http : HttpClient) { }\r\n  ajoutQuestion(q :Question,idu:String): Observable<Question>{\r\n    return this.http.post<Question>(`${this.addquestionUrl}/${idu}`,q);\r\n  }\r\n  getQuestions(): Observable<Question[]>{\r\n    return this.http.get<Question[]>(`${this.getQuestionsurl}`);\r\n\r\n  }\r\n  getQuestionbyId(id:String): Observable<Question>{\r\n    return this.http.get<Question>(`${this.getquestionbyIdsurl}/${id}`);\r\n\r\n  }\r\n  updateQuestion(id:String, q:Question):Observable<Question>{\r\n    return this.http.put<Question>(`${this.modifierQuestionUrl}/${id}`,q);\r\n  }\r\n  deletePost(id:String): any{\r\n    return this.http.delete(`${this.deleteQuestionUrl}/${id}`);\r\n  }\r\n  ////////////////////////////////////////////\r\n  vote(idq:String, idu:String,vote:Question):Observable<Vote>{\r\n    return this.http.post<Vote>(`${this.voteurl}/${idu}/${idq}`,vote);\r\n  }\r\n  getnbrvote(idp:String): Observable<Number>{\r\n    return this.http.get<Number>(`${this.nbrvoteurl}/${idp}`);\r\n\r\n  }\r\n  //////////////////////////////////////////////\r\n  ////////////////////////////////////////////:\r\n  addreponse(idq:String, idu:String,cmt:Reponse):Observable<Reponse>{\r\n    return this.http.post<Reponse>(`${this.addreponseurl}/${idu}/${idq}`,cmt);\r\n  }\r\n  getreponsebyquestion(id:String): Observable<Reponse[]>{\r\n    return this.http.get<Reponse[]>(`${this.getrepbyquestionsurl}/${id}`);\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}