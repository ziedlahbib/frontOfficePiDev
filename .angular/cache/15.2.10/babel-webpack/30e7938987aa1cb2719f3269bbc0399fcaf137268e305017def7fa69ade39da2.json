{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Technologie } from '../../model/technologie';\nlet ForumComponent = class ForumComponent {\n  constructor(ps, formBuilder, route) {\n    this.ps = ps;\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.isReady = false;\n    this.showParagraph = true;\n    this.listofrep = [];\n    this.listofQuestion = [];\n    this.tech = Technologie;\n    this.nbrlike = [];\n  }\n  ngOnInit() {\n    this.currentUser = \"65d621813ece05768b528f25\";\n    this.initFormmodif();\n    this.getallQuestion();\n    this.initFormquest();\n    this.initFormmodif();\n  }\n  addquestion() {\n    this.ps.ajoutQuestion(this.questform.value, this.currentUser).subscribe(res => {\n      console.log(res);\n      this.getallQuestion();\n    });\n  }\n  initFormquest() {\n    this.questform = this.formBuilder.group({\n      contenue: ['', Validators.required],\n      tech: [[], Validators.required]\n    });\n    this.questform.valueChanges.subscribe(data => {\n      console.log(this.questform.value);\n    });\n  }\n  getallQuestion() {\n    this.ps.getQuestions().subscribe(data => {\n      console.log(data);\n      this.listofQuestion = data;\n      this.isReady = true;\n      for (let i of this.listofQuestion) {\n        let index = this.listofQuestion.indexOf(i);\n        this.ps.getnbrvote(this.listofQuestion[index].id).subscribe(res => {\n          this.nbrlike[index] = res;\n        });\n      }\n    });\n  }\n  ajouterreponse(post) {\n    console.log(this.repform.value);\n    this.ps.addreponse(post, this.currentUser, this.repform.value).subscribe(data => {\n      this.getallQuestion();\n    });\n  }\n  getcmtbypos(post) {\n    this.ps.getreponsebyquestion(post).subscribe(data => {});\n  }\n  initForm(data) {\n    this.repform = this.formBuilder.group({\n      contenue: [data?.contenue, Validators.required]\n    });\n    this.repform.valueChanges.subscribe(data => {\n      console.log(this.repform);\n    });\n  }\n  addlike(post) {\n    this.ps.vote(post.id, this.currentUser, post).subscribe(data => {\n      console.log(data);\n      this.ps.getnbrvote(post.id).subscribe(res => {\n        console.log(this.nbrlike);\n        let index = this.listofQuestion.indexOf(post);\n        console.log(index);\n        this.nbrlike[index] = res;\n      });\n    });\n  }\n  // onTechnologySelected(technology: Technologie) {\n  //   // Handle the selected technology here\n  //   this.questform.patchValue({\n  //     tech: technology\n  //   });\n  // }\n  // onTechnologySelected(select: HTMLSelectElement) {\n  //   const selectedOptions = Array.from(select.selectedOptions).map(option => option.value);\n  //   this.questform.get('tech')?.setValue(selectedOptions);\n  // }\n  delete(cmt) {\n    this.ps.deletereponse(cmt.id).subscribe(res => {\n      this.getallQuestion();\n    });\n  }\n  modifierre(rep) {\n    this.ps.updateReponse(rep.id, this.formGroup.value).subscribe(data => {\n      this.getallQuestion();\n    });\n  }\n  initFormmodif() {\n    this.formGroup = this.formBuilder.group({\n      contenue: ['', Validators.required]\n    });\n  }\n  toggleContent(data) {\n    this.showParagraph = !this.showParagraph;\n    this.initForm(data?.contenue);\n  }\n};\nForumComponent = __decorate([Component({\n  selector: 'app-forum',\n  templateUrl: './forum.component.html',\n  styleUrls: ['./forum.component.css']\n})], ForumComponent);\nexport { ForumComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAmEC,UAAU,QAAQ,gBAAgB;AAUrG,SAASC,WAAW,QAAQ,yBAAyB;AAQ9C,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAWzBC,YAAoBC,EAAyB,EAASC,WAAwB,EAASC,KAAY;IAA/E,OAAE,GAAFF,EAAE;IAAgC,gBAAW,GAAXC,WAAW;IAAsB,UAAK,GAALC,KAAK;IAT5F,YAAO,GAAS,KAAK;IAGrB,kBAAa,GAAY,IAAI;IAE7B,cAAS,GAAc,EAAE;IACzB,mBAAc,GAAe,EAAE;IAC/B,SAAI,GAACL,WAAW;IAChB,YAAO,GAAU,EAAE;EACoF;EAEvGM,QAAQ;IACN,IAAI,CAACC,WAAW,GAAG,0BAA0B;IAC7C,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACC,cAAc,EAAE;IAErB,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACF,aAAa,EAAE;EACtB;EACAG,WAAW;IACT,IAAI,CAACR,EAAE,CAACS,aAAa,CAAC,IAAI,CAACC,SAAS,CAACC,KAAK,EAAC,IAAI,CAACP,WAAW,CAAC,CAACQ,SAAS,CACpEC,GAAG,IAAE;MACHC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MACd,IAAI,CAACP,cAAc,EAAE;IACzB,CAAC,CACF;EACH;EACAC,aAAa;IACX,IAAI,CAACG,SAAS,GAAG,IAAI,CAACT,WAAW,CAACe,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAErB,UAAU,CAACsB,QAAQ,CAAC;MACnCC,IAAI,EAAC,CAAC,EAAE,EAAEvB,UAAU,CAACsB,QAAQ;KAEhC,CAAC;IAEF,IAAI,CAACR,SAAS,CAACU,YAAY,CAACR,SAAS,CACnCS,IAAI,IAAE;MAACP,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,SAAS,CAACC,KAAK,CAAC;IAAA,CAAC,CAC1C;EACH;EAGEL,cAAc;IACZ,IAAI,CAACN,EAAE,CAACsB,YAAY,EAAE,CAACV,SAAS,CAC9BS,IAAI,IAAE;MACJP,OAAO,CAACC,GAAG,CAACM,IAAI,CAAC;MACjB,IAAI,CAACE,cAAc,GAACF,IAAI;MACxB,IAAI,CAACG,OAAO,GAAC,IAAI;MACjB,KAAI,IAAIC,CAAC,IAAI,IAAI,CAACF,cAAc,EAAC;QAC/B,IAAIG,KAAK,GAAC,IAAI,CAACH,cAAc,CAACI,OAAO,CAACF,CAAC,CAAC;QACxC,IAAI,CAACzB,EAAE,CAAC4B,UAAU,CAAC,IAAI,CAACL,cAAc,CAACG,KAAK,CAAC,CAACG,EAAE,CAAC,CAACjB,SAAS,CACzDC,GAAG,IAAE;UAEH,IAAI,CAACiB,OAAO,CAACJ,KAAK,CAAC,GAACb,GAAG;QACzB,CAAC,CACF;;IAEL,CAAC,CACF;EACH;EACAkB,cAAc,CAACC,IAAW;IACxBlB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACkB,OAAO,CAACtB,KAAK,CAAC;IAC/B,IAAI,CAACX,EAAE,CAACkC,UAAU,CAACF,IAAI,EAAC,IAAI,CAAC5B,WAAW,EAAC,IAAI,CAAC6B,OAAO,CAACtB,KAAK,CAAC,CAACC,SAAS,CACtES,IAAI,IAAE;MACJ,IAAI,CAACf,cAAc,EAAE;IACnB,CAAC,CAEJ;EAEH;EACA6B,WAAW,CAACH,IAAQ;IAClB,IAAI,CAAChC,EAAE,CAACoC,oBAAoB,CAACJ,IAAI,CAAC,CAACpB,SAAS,CAC1CS,IAAI,IAAE,CAEN,CAAC,CACF;EACH;EACAgB,QAAQ,CAAChB,IAAQ;IACf,IAAI,CAACY,OAAO,GAAG,IAAI,CAAChC,WAAW,CAACe,KAAK,CAAC;MACpCC,QAAQ,EAAE,CAACI,IAAI,EAAEJ,QAAQ,EAAErB,UAAU,CAACsB,QAAQ;KAEjD,CAAC;IAEF,IAAI,CAACe,OAAO,CAACb,YAAY,CAACR,SAAS,CACjCS,IAAI,IAAE;MAACP,OAAO,CAACC,GAAG,CAAC,IAAI,CAACkB,OAAO,CAAC;IAAA,CAAC,CAClC;EACH;EACAK,OAAO,CAACN,IAAa;IACnB,IAAI,CAAChC,EAAE,CAACuC,IAAI,CAACP,IAAI,CAACH,EAAE,EAAC,IAAI,CAACzB,WAAW,EAAC4B,IAAI,CAAC,CAACpB,SAAS,CACnDS,IAAI,IAAE;MACFP,OAAO,CAACC,GAAG,CAACM,IAAI,CAAC;MACjB,IAAI,CAACrB,EAAE,CAAC4B,UAAU,CAACI,IAAI,CAACH,EAAE,CAAC,CAACjB,SAAS,CACnCC,GAAG,IAAE;QACHC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACe,OAAO,CAAC;QACzB,IAAIJ,KAAK,GAAC,IAAI,CAACH,cAAc,CAACI,OAAO,CAACK,IAAI,CAAC;QAC3ClB,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;QAClB,IAAI,CAACI,OAAO,CAACJ,KAAK,CAAC,GAACb,GAAG;MACzB,CAAC,CACF;IACH,CAAC,CACJ;EACH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA2B,MAAM,CAACC,GAAW;IAChB,IAAI,CAACzC,EAAE,CAAC0C,aAAa,CAACD,GAAG,CAACZ,EAAE,CAAC,CAACjB,SAAS,CACrCC,GAAG,IAAE;MACH,IAAI,CAACP,cAAc,EAAE;IACvB,CAAC,CACF;EACH;EAEAqC,UAAU,CAACC,GAAW;IACpB,IAAI,CAAC5C,EAAE,CAAC6C,aAAa,CAACD,GAAG,CAACf,EAAE,EAAC,IAAI,CAACiB,SAAS,CAACnC,KAAK,CAAC,CAACC,SAAS,CAC1DS,IAAI,IAAE;MACJ,IAAI,CAACf,cAAc,EAAE;IACvB,CAAC,CACF;EACH;EACAD,aAAa;IACX,IAAI,CAACyC,SAAS,GAAG,IAAI,CAAC7C,WAAW,CAACe,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAErB,UAAU,CAACsB,QAAQ;KACnC,CAAC;EACJ;EAEA6B,aAAa,CAAC1B,IAAQ;IACpB,IAAI,CAAC2B,aAAa,GAAG,CAAC,IAAI,CAACA,aAAa;IACxC,IAAI,CAACX,QAAQ,CAAChB,IAAI,EAAEJ,QAAQ,CAAC;EAC/B;CACC;AAzIYnB,cAAc,eAL1BH,SAAS,CAAC;EACTsD,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWrD,cAAc,CAyI1B;SAzIYA,cAAc","names":["Component","Validators","Technologie","ForumComponent","constructor","ps","formBuilder","route","ngOnInit","currentUser","initFormmodif","getallQuestion","initFormquest","addquestion","ajoutQuestion","questform","value","subscribe","res","console","log","group","contenue","required","tech","valueChanges","data","getQuestions","listofQuestion","isReady","i","index","indexOf","getnbrvote","id","nbrlike","ajouterreponse","post","repform","addreponse","getcmtbypos","getreponsebyquestion","initForm","addlike","vote","delete","cmt","deletereponse","modifierre","rep","updateReponse","formGroup","toggleContent","showParagraph","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\lahbi\\OneDrive - ESPRIT\\Bureau\\wetransfer_courzello-backoffice_2024-02-21_2018\\Courzello-backOffice\\frontOfficePiDev\\src\\app\\pages\\forum\\forum.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Reponse } from '../../model/reponse';\nimport { Question } from '../../model/question';\nimport { QuestionServiceService } from '../../service/question-service.service';\nimport { Router, RouterOutlet } from '@angular/router';\nimport { Vote } from '../../model/vote';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport {MatIconModule} from '@angular/material/icon';\nimport { Technologie } from '../../model/technologie';\n\n\n@Component({\n  selector: 'app-forum',\n  templateUrl: './forum.component.html',\n  styleUrls: ['./forum.component.css']\n})\nexport class ForumComponent {\n  currentUser!: String;\n  isReady:boolean=false;\n  questform!:FormGroup;\n  formGroup!: FormGroup;\n  showParagraph: boolean = true;\n  repform!: FormGroup;\n  listofrep: Reponse[] = [];\n  listofQuestion: Question[] = [];\n  tech=Technologie\n  nbrlike:Number[]=[]\n  constructor(private ps:QuestionServiceService,private formBuilder: FormBuilder,private route:Router) { }\n\n  ngOnInit(): void {\n    this.currentUser = \"65d621813ece05768b528f25\";\n    this.initFormmodif();\n    this.getallQuestion();\n    \n    this.initFormquest();\n    this.initFormmodif();\n  }\n  addquestion(){\n    this.ps.ajoutQuestion(this.questform.value,this.currentUser).subscribe(\n      res=>{\n        console.log(res)\n          this.getallQuestion()\n      }\n    )\n  }\n  initFormquest() {\n    this.questform = this.formBuilder.group({\n      contenue: ['', Validators.required],\n      tech:[[], Validators.required],\n\n  });\n\n  this.questform.valueChanges.subscribe(\n    data=>{console.log(this.questform.value)}\n  )\n}\n\n\n  getallQuestion(){\n    this.ps.getQuestions().subscribe(\n      data=>{\n        console.log(data)\n        this.listofQuestion=data;\n        this.isReady=true;\n        for(let i of this.listofQuestion){\n          let index=this.listofQuestion.indexOf(i);\n          this.ps.getnbrvote(this.listofQuestion[index].id).subscribe(\n            res=>{\n              \n              this.nbrlike[index]=res;\n            }\n          )\n        }\n      }\n    )\n  }\n  ajouterreponse(post:String){\n    console.log(this.repform.value);\n    this.ps.addreponse(post,this.currentUser,this.repform.value).subscribe(\n    data=>{\n      this.getallQuestion();\n        }\n     \n    );\n  \n  }\n  getcmtbypos(post:any){\n    this.ps.getreponsebyquestion(post).subscribe(\n      data=>{\n  \n      }\n    )\n  }\n  initForm(data:any) {\n    this.repform = this.formBuilder.group({\n      contenue: [data?.contenue, Validators.required],\n\n  });\n\n  this.repform.valueChanges.subscribe(\n    data=>{console.log(this.repform)}\n  )\n}\naddlike(post:Question){\n  this.ps.vote(post.id,this.currentUser,post).subscribe(\n    data=>{\n        console.log(data)\n        this.ps.getnbrvote(post.id).subscribe(\n          res=>{\n            console.log(this.nbrlike)\n            let index=this.listofQuestion.indexOf(post);\n            console.log(index)\n            this.nbrlike[index]=res;\n          }\n        )\n      }\n  )\n}\n// onTechnologySelected(technology: Technologie) {\n//   // Handle the selected technology here\n//   this.questform.patchValue({\n//     tech: technology\n//   });\n// }\n// onTechnologySelected(select: HTMLSelectElement) {\n//   const selectedOptions = Array.from(select.selectedOptions).map(option => option.value);\n//   this.questform.get('tech')?.setValue(selectedOptions);\n// }\ndelete(cmt:Reponse){\n  this.ps.deletereponse(cmt.id).subscribe(\n    res=>{\n      this.getallQuestion();\n    }\n  )\n}\n\nmodifierre(rep:Reponse){\n  this.ps.updateReponse(rep.id,this.formGroup.value).subscribe(\n    data=>{\n      this.getallQuestion();\n    }\n  )\n}\ninitFormmodif() {\n  this.formGroup = this.formBuilder.group({\n    contenue: ['', Validators.required]\n  });\n}\n\ntoggleContent(data:any) {\n  this.showParagraph = !this.showParagraph;\n  this.initForm(data?.contenue);\n}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}