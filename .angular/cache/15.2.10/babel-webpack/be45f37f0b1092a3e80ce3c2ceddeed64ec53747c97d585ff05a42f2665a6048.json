{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Technologie } from '../../model/technologie';\nlet ForumComponent = class ForumComponent {\n  constructor(ps, formBuilder, route) {\n    this.ps = ps;\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.isReady = false;\n    this.hide = true;\n    this.listofrep = [];\n    this.repo = [];\n    this.listofQuestion = [];\n    this.tech = Technologie;\n    this.nbrlike = [];\n    this.formGroups = [];\n    // questionsWithResponses: any[] = [];\n    // showResponse: boolean[][] = []; \n    // showParagraphs: boolean[][] = []; // Array to store the visibility state for each comment\n    // initializeVisibilityState(responses:Reponse[]) {\n    //   this.showParagraphs = responses.map(() => []);\n    //   // Initialize the visibility state for each response's form group\n    //   responses.forEach((response, responseIndex) => {\n    //     Object.keys(response.formGroup.controls).forEach(controlName => {\n    //       const controlIndex = parseInt(controlName);\n    //       this.showParagraphs[responseIndex][controlIndex] = false;\n    //     });\n    //   });\n    // }\n    // toggleContent(responseIndex: number, controlIndex: number) {\n    //   this.showParagraphs[responseIndex][controlIndex] = !this.showParagraphs[responseIndex][controlIndex];\n    // }\n    this.showParagraph = [];\n  }\n  ngOnInit() {\n    this.currentUser = \"65d621813ece05768b528f25\";\n    this.initForm();\n    this.getallQuestion();\n    this.initFormquest();\n    this.formGroup = this.formBuilder.group({\n      contenue: ['', Validators.required]\n    });\n  }\n  addquestion() {\n    this.ps.ajoutQuestion(this.questform.value, this.currentUser).subscribe(res => {\n      console.log(res);\n      this.getallQuestion();\n    });\n  }\n  initFormquest() {\n    this.questform = this.formBuilder.group({\n      contenue: ['', Validators.required],\n      tech: [[], Validators.required]\n    });\n    this.questform.valueChanges.subscribe(data => {\n      console.log(this.questform.value);\n    });\n  }\n  getallQuestion() {\n    this.ps.getQuestions().subscribe(data => {\n      console.log(data);\n      this.listofQuestion = data;\n      this.isReady = true;\n      for (let question of data) {\n        if (question.reponses != null) {\n          for (let reponse of question.reponses) {\n            if (reponse != null) {\n              console.log(reponse);\n              const formGroup = this.initFormmodif(reponse);\n              this.formGroups.push(formGroup);\n              this.formGroups = question.reponses.map(reponse => this.initFormmodif(reponse));\n              this.showParagraph.push(false);\n            }\n          }\n        }\n        let index = this.listofQuestion.indexOf(question);\n        this.ps.getnbrvote(question.id).subscribe(res => {\n          this.nbrlike[index] = res;\n        });\n      }\n    });\n  }\n  ajouterreponse(post) {\n    console.log(this.repform.value);\n    this.ps.addreponse(post, this.currentUser, this.repform.value).subscribe(data => {\n      this.getallQuestion();\n    });\n  }\n  getcmtbypos(post) {\n    this.ps.getreponsebyquestion(post).subscribe(data => {});\n  }\n  addlike(post) {\n    this.ps.vote(post.id, this.currentUser, post).subscribe(data => {\n      console.log(data);\n      this.ps.getnbrvote(post.id).subscribe(res => {\n        console.log(this.nbrlike);\n        let index = this.listofQuestion.indexOf(post);\n        console.log(index);\n        this.nbrlike[index] = res;\n      });\n    });\n  }\n  // onTechnologySelected(technology: Technologie) {\n  //   // Handle the selected technology here\n  //   this.questform.patchValue({\n  //     tech: technology\n  //   });\n  // }\n  // onTechnologySelected(select: HTMLSelectElement) {\n  //   const selectedOptions = Array.from(select.selectedOptions).map(option => option.value);\n  //   this.questform.get('tech')?.setValue(selectedOptions);\n  // }\n  delete(cmt) {\n    this.ps.deletereponse(cmt.id).subscribe(res => {\n      this.getallQuestion();\n    });\n  }\n  modifierre(rep) {\n    this.ps.updateReponse(rep.id, this.formGroup.value).subscribe(data => {\n      this.getallQuestion();\n    });\n  }\n  initForm() {\n    this.repform = this.formBuilder.group({\n      contenue: ['', Validators.required]\n    });\n  }\n  initFormmodif(response) {\n    return this.formBuilder.group({\n      contenue: [response?.contenue, Validators.required]\n    });\n  }\n  toggleContent(index) {\n    this.showParagraph[index] = !this.showParagraph[index];\n  }\n};\nForumComponent = __decorate([Component({\n  selector: 'app-forum',\n  templateUrl: './forum.component.html',\n  styleUrls: ['./forum.component.css']\n})], ForumComponent);\nexport { ForumComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAmEC,UAAU,QAAQ,gBAAgB;AAUrG,SAASC,WAAW,QAAQ,yBAAyB;AAQ9C,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAYzBC,YAAoBC,EAA0B,EAAUC,WAAwB,EAAUC,KAAa;IAAnF,OAAE,GAAFF,EAAE;IAAkC,gBAAW,GAAXC,WAAW;IAAuB,UAAK,GAALC,KAAK;IAV/F,YAAO,GAAY,KAAK;IAGxB,SAAI,GAAY,IAAI;IAEpB,cAAS,GAAc,EAAE;IACzB,SAAI,GAAc,EAAE;IACpB,mBAAc,GAAe,EAAE;IAC/B,SAAI,GAAGL,WAAW;IAClB,YAAO,GAAa,EAAE;IAiCtB,eAAU,GAAgB,EAAE;IAmG5B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA,kBAAa,GAAc,EAAE;EApJ8E;EAE3GM,QAAQ;IACN,IAAI,CAACC,WAAW,GAAG,0BAA0B;IAE7C,IAAI,CAACC,QAAQ,EAAE;IACf,IAAI,CAACC,cAAc,EAAE;IACrB,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACP,WAAW,CAACQ,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACe,QAAQ;KACnC,CAAC;EACJ;EACAC,WAAW;IACT,IAAI,CAACZ,EAAE,CAACa,aAAa,CAAC,IAAI,CAACC,SAAS,CAACC,KAAK,EAAE,IAAI,CAACX,WAAW,CAAC,CAACY,SAAS,CACrEC,GAAG,IAAG;MACJC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChB,IAAI,CAACX,cAAc,EAAE;IACvB,CAAC,CACF;EACH;EACAC,aAAa;IACX,IAAI,CAACO,SAAS,GAAG,IAAI,CAACb,WAAW,CAACQ,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACe,QAAQ,CAAC;MACnCS,IAAI,EAAE,CAAC,EAAE,EAAExB,UAAU,CAACe,QAAQ;KAE/B,CAAC;IAEF,IAAI,CAACG,SAAS,CAACO,YAAY,CAACL,SAAS,CACnCM,IAAI,IAAG;MAAGJ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,SAAS,CAACC,KAAK,CAAC;IAAC,CAAC,CAC9C;EACH;EAGAT,cAAc;IACZ,IAAI,CAACN,EAAE,CAACuB,YAAY,EAAE,CAACP,SAAS,CAACM,IAAI,IAAG;MACtCJ,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;MACjB,IAAI,CAACE,cAAc,GAAGF,IAAI;MAC1B,IAAI,CAACG,OAAO,GAAG,IAAI;MAEnB,KAAK,IAAIC,QAAQ,IAAIJ,IAAI,EAAE;QACzB,IAAII,QAAQ,CAACC,QAAQ,IAAI,IAAI,EAAE;UAC7B,KAAK,IAAIC,OAAO,IAAIF,QAAQ,CAACC,QAAQ,EAAE;YACrC,IAAIC,OAAO,IAAI,IAAI,EAAE;cACnBV,OAAO,CAACC,GAAG,CAACS,OAAO,CAAC;cACpB,MAAMpB,SAAS,GAAG,IAAI,CAACqB,aAAa,CAACD,OAAO,CAAC;cAC7C,IAAI,CAACE,UAAU,CAACC,IAAI,CAACvB,SAAS,CAAC;cAC/B,IAAI,CAACsB,UAAU,GAAGJ,QAAQ,CAACC,QAAQ,CAACK,GAAG,CAACJ,OAAO,IAAI,IAAI,CAACC,aAAa,CAACD,OAAO,CAAC,CAAC;cAC/E,IAAI,CAACK,aAAa,CAACF,IAAI,CAAC,KAAK,CAAC;;;;QAMpC,IAAIG,KAAK,GAAG,IAAI,CAACV,cAAc,CAACW,OAAO,CAACT,QAAQ,CAAC;QACjD,IAAI,CAAC1B,EAAE,CAACoC,UAAU,CAACV,QAAQ,CAACW,EAAE,CAAC,CAACrB,SAAS,CAACC,GAAG,IAAG;UAC9C,IAAI,CAACqB,OAAO,CAACJ,KAAK,CAAC,GAAGjB,GAAG;QAC3B,CAAC,CAAC;;IAEN,CAAC,CAAC;EACJ;EACAsB,cAAc,CAACC,IAAY;IACzBtB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACsB,OAAO,CAAC1B,KAAK,CAAC;IAC/B,IAAI,CAACf,EAAE,CAAC0C,UAAU,CAACF,IAAI,EAAE,IAAI,CAACpC,WAAW,EAAE,IAAI,CAACqC,OAAO,CAAC1B,KAAK,CAAC,CAACC,SAAS,CACtEM,IAAI,IAAG;MACL,IAAI,CAAChB,cAAc,EAAE;IACvB,CAAC,CAEF;EAEH;EACAqC,WAAW,CAACH,IAAS;IACnB,IAAI,CAACxC,EAAE,CAAC4C,oBAAoB,CAACJ,IAAI,CAAC,CAACxB,SAAS,CAC1CM,IAAI,IAAG,CAEP,CAAC,CACF;EACH;EAGAuB,OAAO,CAACL,IAAc;IACpB,IAAI,CAACxC,EAAE,CAAC8C,IAAI,CAACN,IAAI,CAACH,EAAE,EAAE,IAAI,CAACjC,WAAW,EAAEoC,IAAI,CAAC,CAACxB,SAAS,CACrDM,IAAI,IAAG;MACLJ,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;MACjB,IAAI,CAACtB,EAAE,CAACoC,UAAU,CAACI,IAAI,CAACH,EAAE,CAAC,CAACrB,SAAS,CACnCC,GAAG,IAAG;QACJC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACmB,OAAO,CAAC;QACzB,IAAIJ,KAAK,GAAG,IAAI,CAACV,cAAc,CAACW,OAAO,CAACK,IAAI,CAAC;QAC7CtB,OAAO,CAACC,GAAG,CAACe,KAAK,CAAC;QAClB,IAAI,CAACI,OAAO,CAACJ,KAAK,CAAC,GAAGjB,GAAG;MAC3B,CAAC,CACF;IACH,CAAC,CACF;EACH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA8B,MAAM,CAACC,GAAY;IACjB,IAAI,CAAChD,EAAE,CAACiD,aAAa,CAACD,GAAG,CAACX,EAAE,CAAC,CAACrB,SAAS,CACrCC,GAAG,IAAG;MACJ,IAAI,CAACX,cAAc,EAAE;IACvB,CAAC,CACF;EACH;EAEA4C,UAAU,CAACC,GAAY;IACrB,IAAI,CAACnD,EAAE,CAACoD,aAAa,CAACD,GAAG,CAACd,EAAE,EAAE,IAAI,CAAC7B,SAAS,CAACO,KAAK,CAAC,CAACC,SAAS,CAC3DM,IAAI,IAAG;MACL,IAAI,CAAChB,cAAc,EAAE;IACvB,CAAC,CACF;EACH;EACAD,QAAQ;IACN,IAAI,CAACoC,OAAO,GAAG,IAAI,CAACxC,WAAW,CAACQ,KAAK,CAAC;MACpCC,QAAQ,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACe,QAAQ;KACnC,CAAC;EACJ;EAEAkB,aAAa,CAACwB,QAAiB;IAC7B,OAAO,IAAI,CAACpD,WAAW,CAACQ,KAAK,CAAC;MAC5BC,QAAQ,EAAE,CAAC2C,QAAQ,EAAE3C,QAAQ,EAAEd,UAAU,CAACe,QAAQ;KACnD,CAAC;EACJ;EAoBA2C,aAAa,CAACpB,KAAY;IACxB,IAAI,CAACD,aAAa,CAACC,KAAK,CAAC,GAAG,CAAC,IAAI,CAACD,aAAa,CAACC,KAAK,CAAC;EAC1D;CACC;AApKYpC,cAAc,eAL1BH,SAAS,CAAC;EACT4D,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACW3D,cAAc,CAoK1B;SApKYA,cAAc","names":["Component","Validators","Technologie","ForumComponent","constructor","ps","formBuilder","route","ngOnInit","currentUser","initForm","getallQuestion","initFormquest","formGroup","group","contenue","required","addquestion","ajoutQuestion","questform","value","subscribe","res","console","log","tech","valueChanges","data","getQuestions","listofQuestion","isReady","question","reponses","reponse","initFormmodif","formGroups","push","map","showParagraph","index","indexOf","getnbrvote","id","nbrlike","ajouterreponse","post","repform","addreponse","getcmtbypos","getreponsebyquestion","addlike","vote","delete","cmt","deletereponse","modifierre","rep","updateReponse","response","toggleContent","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\lahbi\\OneDrive - ESPRIT\\Bureau\\wetransfer_courzello-backoffice_2024-02-21_2018\\Courzello-backOffice\\frontOfficePiDev\\src\\app\\pages\\forum\\forum.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Reponse } from '../../model/reponse';\nimport { Question } from '../../model/question';\nimport { QuestionServiceService } from '../../service/question-service.service';\nimport { Router, RouterOutlet } from '@angular/router';\nimport { Vote } from '../../model/vote';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Technologie } from '../../model/technologie';\n\n\n@Component({\n  selector: 'app-forum',\n  templateUrl: './forum.component.html',\n  styleUrls: ['./forum.component.css']\n})\nexport class ForumComponent {\n  currentUser!: String;\n  isReady: boolean = false;\n  questform!: FormGroup;\n  formGroup!: FormGroup;\n  hide: boolean = true;\n  repform!: FormGroup;\n  listofrep: Reponse[] = [];\n  repo: Reponse[] = [];\n  listofQuestion: Question[] = [];\n  tech = Technologie\n  nbrlike: Number[] = []\n  constructor(private ps: QuestionServiceService, private formBuilder: FormBuilder, private route: Router) { }\n\n  ngOnInit(): void {\n    this.currentUser = \"65d621813ece05768b528f25\";\n\n    this.initForm();\n    this.getallQuestion();\n    this.initFormquest();\n    this.formGroup = this.formBuilder.group({\n      contenue: ['', Validators.required]\n    });\n  }\n  addquestion() {\n    this.ps.ajoutQuestion(this.questform.value, this.currentUser).subscribe(\n      res => {\n        console.log(res)\n        this.getallQuestion()\n      }\n    )\n  }\n  initFormquest() {\n    this.questform = this.formBuilder.group({\n      contenue: ['', Validators.required],\n      tech: [[], Validators.required],\n\n    });\n\n    this.questform.valueChanges.subscribe(\n      data => { console.log(this.questform.value) }\n    )\n  }\n\n  formGroups: FormGroup[] = [];\n  getallQuestion() {\n    this.ps.getQuestions().subscribe(data => {\n      console.log(data);\n      this.listofQuestion = data;\n      this.isReady = true;\n  \n      for (let question of data) {\n        if (question.reponses != null) {\n          for (let reponse of question.reponses) {\n            if (reponse != null) {\n              console.log(reponse);\n              const formGroup = this.initFormmodif(reponse);\n              this.formGroups.push(formGroup);\n              this.formGroups = question.reponses.map(reponse => this.initFormmodif(reponse));\n              this.showParagraph.push(false);\n\n            }\n          }\n        }\n  \n        let index = this.listofQuestion.indexOf(question);\n        this.ps.getnbrvote(question.id).subscribe(res => {\n          this.nbrlike[index] = res;\n        });\n      }\n    });\n  }\n  ajouterreponse(post: String) {\n    console.log(this.repform.value);\n    this.ps.addreponse(post, this.currentUser, this.repform.value).subscribe(\n      data => {\n        this.getallQuestion();\n      }\n\n    );\n\n  }\n  getcmtbypos(post: any) {\n    this.ps.getreponsebyquestion(post).subscribe(\n      data => {\n\n      }\n    )\n  }\n\n  \n  addlike(post: Question) {\n    this.ps.vote(post.id, this.currentUser, post).subscribe(\n      data => {\n        console.log(data)\n        this.ps.getnbrvote(post.id).subscribe(\n          res => {\n            console.log(this.nbrlike)\n            let index = this.listofQuestion.indexOf(post);\n            console.log(index)\n            this.nbrlike[index] = res;\n          }\n        )\n      }\n    )\n  }\n  // onTechnologySelected(technology: Technologie) {\n  //   // Handle the selected technology here\n  //   this.questform.patchValue({\n  //     tech: technology\n  //   });\n  // }\n  // onTechnologySelected(select: HTMLSelectElement) {\n  //   const selectedOptions = Array.from(select.selectedOptions).map(option => option.value);\n  //   this.questform.get('tech')?.setValue(selectedOptions);\n  // }\n  delete(cmt: Reponse) {\n    this.ps.deletereponse(cmt.id).subscribe(\n      res => {\n        this.getallQuestion();\n      }\n    )\n  }\n\n  modifierre(rep: Reponse) {\n    this.ps.updateReponse(rep.id, this.formGroup.value).subscribe(\n      data => {\n        this.getallQuestion();\n      }\n    )\n  }\n  initForm() {\n    this.repform = this.formBuilder.group({\n      contenue: ['', Validators.required]\n    });\n  }\n\n  initFormmodif(response: Reponse): FormGroup {\n    return this.formBuilder.group({\n      contenue: [response?.contenue, Validators.required]\n    });\n  }\n  \n  // questionsWithResponses: any[] = [];\n  // showResponse: boolean[][] = []; \n  // showParagraphs: boolean[][] = []; // Array to store the visibility state for each comment\n  // initializeVisibilityState(responses:Reponse[]) {\n  //   this.showParagraphs = responses.map(() => []);\n  //   // Initialize the visibility state for each response's form group\n  //   responses.forEach((response, responseIndex) => {\n  //     Object.keys(response.formGroup.controls).forEach(controlName => {\n  //       const controlIndex = parseInt(controlName);\n  //       this.showParagraphs[responseIndex][controlIndex] = false;\n  //     });\n  //   });\n  // }\n  \n  // toggleContent(responseIndex: number, controlIndex: number) {\n  //   this.showParagraphs[responseIndex][controlIndex] = !this.showParagraphs[responseIndex][controlIndex];\n  // }\n  showParagraph: boolean[] = [];\n  toggleContent(index:number) {\n    this.showParagraph[index] = !this.showParagraph[index];\n}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}